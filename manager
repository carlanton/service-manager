#!/bin/bash
#
# manager
#
# Starts and removes service instances based on CouchDb changes
#
set -u

function error
{
  echo "error: $1" >&2
  exit 1
}

function stop
{
  local service_name="$1"
  local service_address="$2"

  trap '' EXIT TERM INT # ignore signals
  systemd-notify STOPPING=1 STATUS="Stopping instances"

  echo "[stopping all instances of ${service_name}@]"
  systemctl stop "${service_name}"'@[[:digit:]]*' # avoid stopping the manager

  echo "[removing ipvs service"]
  ipvsadm -D -t "$service_address"

  exit 0
}

function main
{
  local service_name="$1"
  local service_address="$2"
  local document_url="${COUCHDB_URL}/${service_name}"

  curl -Isf "$document_url" > /dev/null || error "Failed to fetch config document"

  # Setup ipvs
  echo "[adding ipvs virtual service $service_address]"
  modprobe ip_vs
  ipvsadm -A -t "$service_address" -s rr

  trap "stop $service_name $service_address" EXIT TERM INT


  while true
  do
    rev=$(curl -Isf "$document_url" | grep '^ETag:' | cut -d'"' -f2)
    if [ "$?" -ne 0 ]
    then
      echo "warning: failed to fetch config document $document_url"
      sleep 10
      continue
    fi

    if ! systemctl is-active -q "${service_name}@${rev}.service"
    then

      echo "[starting ${service_name}@${rev}]"
      systemctl start "${service_name}@${rev}.service"
      systemd-notify READY=1 STATUS="started instance ${rev}"

    else

      # Make sure there is only one instance running
      systemctl show --property=Id "$service_name"'@*' | grep '^Id=.*@[[:digit:]].*' | cut -d@ -f2 | sort -rn | tail -n +2 |\
      while read rev; do
        echo "[stopping ${service_name}@${rev}]"
        systemctl stop "${service_name}@${rev}"
      done

    fi

    sleep 10
  done
}

(( $# != 2 )) && error "usage: $0 service-name service-address"
main "$1" "$2"
